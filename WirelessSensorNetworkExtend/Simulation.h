#pragma once
#include "Distribution.h"
#include "SensorNode.h"

namespace WSN
{

	struct Failure
	{
		uint64_t SNID;
		double Timestamp;
	};

	/// <summary>
	/// Sensor node state at a certain time interval
	/// </summary>
	struct SimulationInterval
	{
		WorkingState State;
		double StartTime;
		double EndTime;
	};			

	struct SimulationResults
	{
		double ActualTotalDuration = 0;
		uint64_t FinalFailureIndex = 0;
		double CWSNEfficiency = 0;

		std::vector<Failure> Failures;
	};

	/// <summary>
	/// Simulation hyperparameters
	/// </summary>
	struct SimulationParameters
	{
		double TotalDurationToBeTransferred = -1;
		double TransferTime = -1;
		double RecoveryTime = -1;

		Distribution FailureDistribution;

		std::vector<double> LevelRadius;
		std::vector<uint64_t> LevelSNCount;

		double EnergyRateWorking;
		double EnergyRateTransfer;

		double TransmissionRange;
		double InterferenceRange;
	};


	enum class SimulationType
	{
		FT_TDMA = 0,
		RR_TDMA
	};

	/// <summary>
	/// Constructs a simulation environment. Then, repeats simulation for all failures generated by distributions in m_Distributions
	/// </summary>
	class Simulation
	{
	public:
		Simulation(SimulationParameters sp);


		/// <summary>
		/// Runs the simulation. Be sure to add the desired failure distributions using AddFailureDistribution() before running!
		/// </summary>
		void Run();

		void Reset();

		inline uint64_t GetSimulationID() const { return m_SimulationID; }
		inline SimulationParameters GetSimulationParameters() const { return m_SimulationParameters; }

	private:
		void InnerRun(SimulationType simulationType, double seed);

		uint64_t m_SimulationID;

		//static std::vector<SimulationSummaryData> s_Summary;

		SimulationParameters m_SimulationParameters;

		std::vector<SensorNode> m_SensorNodes;

		SimulationResults m_SimulationResults;


		void GenerateSNs();
		void CreateSNRoutingTables();
		void CalculateSNDeltaOpts();
	};
}